var searchIndex = {};
searchIndex['hamlet'] = {"items":[[4,"Token","hamlet","An HTML token, these are representations of everything needed to generate\nan [HTML document](https://www.w3.org/TR/html/syntax.html#writing).",null,null],[13,"StartTag","","A [start tag](https://www.w3.org/TR/html/syntax.html#syntax-start-tag)\ntoken.",0,null],[12,"name","hamlet::Token","The element's [tag\nname](https://www.w3.org/TR/html/syntax.html#syntax-tag-name).",0,null],[12,"attrs","","Any attributes for the start tag.",0,null],[12,"self_closing","","Marker indicating the tag should be self-closing, such as `<br />`\n(although `br` is a [void\nelement](https://www.w3.org/TR/html/syntax.html#void-elements) so\nthis has no effect on it).",0,null],[13,"EndTag","hamlet","An [end tag](https://www.w3.org/TR/html/syntax.html#syntax-end-tag)\ntoken.",0,null],[12,"name","hamlet::Token","The element's [tag\nname](https://www.w3.org/TR/html/syntax.html#syntax-tag-name).",0,null],[13,"Text","hamlet","The text contained will be escaped on `Display`.",0,null],[13,"RawText","","The text contained will be `Display`ed as-is.",0,null],[13,"Comment","","Comments contained within `<!--` and `-->`. No validation is done to\nensure that the text conforms to the [html comment\nsyntax](https://www.w3.org/TR/html/syntax.html#syntax-comments).",0,null],[13,"DOCTYPE","","The [HTML5 DOCTYPE\ndeclaration](https://www.w3.org/TR/html/syntax.html#syntax-doctype)\n(`<!DOCTYPE html>`)",0,null],[0,"util","","Currently contains just a semi-private utility function to support the\n[`attrs!`](./macro.attrs!.html) macro.",null,null],[5,"identifier_to_tag_name","hamlet::util","Internally used by the macro to hyphenate camel-cased attribute names.",null,{"inputs":[{"name":"t"}],"output":{"name":"cow"}}],[0,"attr","hamlet","Contains structs for defining attributes on elements.",null,null],[3,"Attribute","hamlet::attr","An [HTML attribute](https://www.w3.org/TR/html/syntax.html#attributes-0).",null,null],[12,"name","","The [attribute's name][name]. The value of this field will not be\nvalidated, you must ensure it meets the requirements specified in the\nspec yourself.",1,null],[12,"value","","The [attribute's value][value]. This field will be escaped\nautomatically, if it is an empty string then the attribute will be\nwritten with the 'Empty attribute syntax'.",1,null],[3,"AttributeList","","A list of [`Attribute`](./struct.Attribute.html)s.",null,null],[3,"Iter","","Immutable [`AttributeList`](./struct.AttributeList.html) iterator.",null,null],[11,"cmp","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"attribute"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"new","","Create an attribute, useful to avoid having to convert strings to\n`Cow<str>` yourself.",1,{"inputs":[{"name":"attribute"},{"name":"n"},{"name":"v"}],"output":{"name":"attribute"}}],[11,"fmt","","",1,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"attributelist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"attributelist"}],"output":{"name":"attributelist"}}],[11,"empty","","Return an empty `AttributeList`",2,{"inputs":[{"name":"attributelist"}],"output":{"name":"attributelist"}}],[11,"from_vec","","Note that this does not check for duplicate attribute names. Generally,\nend users are not expected to call this method, and instead use\nhigh-level builder APIs or macros available to make construction easier,\nsuch as the provided [`attrs!`](./macro.attrs!.html) macro.",2,{"inputs":[{"name":"attributelist"},{"name":"vec"}],"output":{"name":"attributelist"}}],[11,"into_vec","","Pull all attributes out of this collection, useful if you need to\nperform some more extensive modification.",2,{"inputs":[{"name":"attributelist"}],"output":{"name":"vec"}}],[11,"get","","Try and get the value of an attribute.",2,{"inputs":[{"name":"attributelist"},{"name":"s"}],"output":{"name":"option"}}],[11,"set","","Unconditionally set an attribute to a value. If the attribute already\nexists in the list, update its value, otherwise add a new attribute to\nthe list.",2,{"inputs":[{"name":"attributelist"},{"name":"n"},{"name":"v"}],"output":null}],[11,"remove","","Removes and returns the attribute if there was one.",2,{"inputs":[{"name":"attributelist"},{"name":"s"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the list.",2,{"inputs":[{"name":"attributelist"}],"output":{"name":"iter"}}],[11,"next","","",3,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"attributelist"},{"name":"attributelist"}],"output":{"name":"bool"}}],[11,"eq","hamlet","",0,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"start_tag","","Create a [`StartTag`](#variant.StartTag) token with specified element\nname and attributes, use [`closed()`](#method.closed) to set the\n[`self_closing`](#variant.StartTag.field.self_closing) flag.",0,{"inputs":[{"name":"token"},{"name":"s"},{"name":"attributelist"}],"output":{"name":"token"}}],[11,"end_tag","","Create an [`EndTag`](#variant.EndTag) token with specified element\nname.",0,{"inputs":[{"name":"token"},{"name":"s"}],"output":{"name":"token"}}],[11,"text","","Create a [`Text`](#variant.Text) token with specified text content.",0,{"inputs":[{"name":"token"},{"name":"s"}],"output":{"name":"token"}}],[11,"raw_text","","Create a [`RawText`](#variant.RawText) token with specified raw text\ncontent.",0,{"inputs":[{"name":"token"},{"name":"s"}],"output":{"name":"token"}}],[11,"comment","","Create a [`Comment`](#variant.Comment) token with specified comment\ncontent.",0,{"inputs":[{"name":"token"},{"name":"s"}],"output":{"name":"token"}}],[11,"closed","","If `self` is a [`StartTag`](#variant.StartTag), returns a copy with\n[`self_closing`](#variant.StartTag.field.self_closing) set to `true`;\notherwise, returns `self`.",0,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"attrs!","","A convenience macro for `AttributeList` construction. It does not check for\nduplicates in attribute names. Attribute names with hyphens should be\ncamel-cased.",null,null]],"paths":[[4,"Token"],[3,"Attribute"],[3,"AttributeList"],[3,"Iter"]]};
initSearch(searchIndex);
